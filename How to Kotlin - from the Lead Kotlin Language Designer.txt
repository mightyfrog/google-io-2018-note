How to Kotlin - from the Lead Kotlin Language Designer
https://www.youtube.com/watch?v=6P20npkvcb8

*live coding session

data class (5:05)

field (6:15)

delegation for properties (6:55)

w/o delegation:
	private var _os: String? = null
	val os: String
		get() {
			if (_os == null) {
				println("Computing...")
				_os = System.getProperty("os.name") +
						" v" + System.getProperty("os.version") +
						" (" + System.getProperty("os.arch") + ")"
			}
			return _os!!
		}

	fun main(args: Array<String>) {
		for (i in 1..3) {
			println(os)
		}
	}

w/ lazy delegation:
	val os: String by lazy {
		println("Computing...")
		_os = System.getProperty("os.name") +
				" v" + System.getProperty("os.version") +
				" (" + System.getProperty("os.arch") + ")"
	}

w/o delegation:
	var p1: String = "initial"
		get() {
			println("You read me")
			return field
		}
		set(v) {
			println("You write me")
			field = v
		}

	var p2: String = "initial"
		get() {
			println("You read me")
			return field
		}
		set(v) {
			println("You write me")
			field = v
		}
	var p3: ...

w/ delegation: declare a single class like this
	var p1 by Prop("initial")
	var p2 by Prop("initial")
	var p3 by Prop("initial")

	class Prop(var field: String) {
		operator fun getValue(thisRef: Any?, p: KProperty<*>): String {
			println("You read me")
			return field
		}

		operator fun setValue(thisRef: Any?, p: KProperty<*>, v: String) {
			println("You write me")
			field = v
		}
	}


refactoring demo:
	class StringUtil {
		fun getFirstWord(s: String, separator: String): String {
			val index = s.indexOf(separator)
			return if (index < 0) s else s.substring(0, index)
		}

		fun getFirstWord(s: String) = getFirstWord(s, " ")
	}

	fun main(args: Array<String) {
		pringln(
			StringUtil().getFirstWord("Jane Doe")
		)
	}

improvement1:
	object StringUtil {                                           <----- class to object
		fun getFirstWord(s: String, separator: String): String {
			val index = s.indexOf(separator)
			return if (index < 0) s else s.substring(0, index)
		}

		fun getFirstWord(s: String) = getFirstWord(s, " ")
	}

	fun main(args: Array<String) {
		pringln(
			StringUtil.getFirstWord("Jane Doe")                   <----- static access
		)
	}

improvement2:
	fun getFirstWord(s: String, separator: String): String { <---- kotlin doens't need an enclausing container
		val index = s.indexOf(separator)
		return if (index < 0) s else s.substring(0, index)
	}

	fun getFirstWord(s: String) = getFirstWord(s, " ")

	fun main(args: Array<String) {
		pringln(
			getFirstWord("Jane Doe")
		)
	}

improvement3:
	fun getFirstWord(s: String, separator: String = " "): String { <---- default argument
		val index = s.indexOf(separator)
		return if (index < 0) s else s.substring(0, index)
	}

	fun main(args: Array<String) {
		pringln(
			getFirstWord("Jane Doe")
		)
	}

improvement4:
	fun String.getFirstWord(separator: String = " "): String { <----extension function
		val index = indexOf(separator)
		return if (index < 0) this else substring(0, index)
	}

	fun main(args: Array<String) {
		pringln(
			"Jane Doe".getFirstWord
		)
	}

improvement5:
	val String.firstWord: String { <----extension property
	get() {
		val index = indexOf(" ")
		return if (index < 0) this else substring(0, index)
	}

	fun main(args: Array<String) {
		pringln(
			"Jane Doe".getFirstWord
		)
	}




refactoring demo (14:00)
BAD code:
	fun main(args: Array<String>) {
		val root = Container(
				Text("a"),
				Container(
					Text("b"),
					Container(
						Text("c"),
						Text("d")
					),
					Text("e")
				),
				Text("f")
		)

		println(root.extractText())
	}

	abstract class Element
	class Container(vararg val children: Element) : Element()
	class Text(val text: String): Element()

	fun Element.extractText(): String {
		return extractText(this, StringBuilder()).toString()
	}

	fun extractText(e: Element, sb: StringBuilder): StringBuilder {
		if (e is Text) {
			val text = e as Text
			sb.append(text.text)
		} else if (e is Container) {
			val container = e as Container
			for (child in container.children) {
				extractText(child, sb)
			}
		} else {
			error("Unrecognized element: $e")
		}

		return sb
	}

improvement1: make a local function

	fun Element.extractText(): String {
		val sb = StringBuilder()
		fun extractText(e: Element) {
			if (e is Text) {
				val text = e as Text
				sb.append(text.text)
			} else if (e is Container) {
				val container = e as Container
				for (child in container.children) {
					extractText(child, sb)
				}
			} else {
				error("Unrecognized element: $e")
			}
		}
		extractText(this)

		return sb.toString()
	}

improvement2: smart cast

	fun Element.extractText(): String {
		val sb = StringBuilder()
		fun extractText(e: Element) {
			if (e is Text) {
				sb.append(e.text)
			} else if (e is Container) {
				for (child in e.children) {
					extractText(child, sb)
				}
			} else {
				error("Unrecognized element: $e")
			}
		}
		extractText(this)

		return sb.toString()
	}

improvement3:

	fun Element.extractText(): String {
		val sb = StringBuilder()
		fun extractText(e: Element) {
			if (e is Text) {
				sb.append(e.text)
			} else if (e is Container) {
				e.children.forEach(::extractText)
			} else {
				error("Unrecognized element: $e")
			}
		}
		extractText(this)

		return sb.toString()
	}

improvement4:

	fun Element.extractText(): String {
		val sb = StringBuilder()
		fun extractText(e: Element) {
			when (e) {
				is Text -> sb.append(e.text)
				is Container -> e.children.forEach(::extractText)
				else -> error("Unrecognized element: $e")
			}
		}
		extractText(this)

		return sb.toString()
	}

improvement5: sealed class

	sealed class Element
	class Container(vararg val children: Element) : Element()
	class Text(val text: String): Element()

	fun Element.extractText(): String {
		val sb = StringBuilder()
		fun extractText(e: Element) {
			when (e) {
				is Text -> sb.append(e.text)
				is Container -> e.children.forEach(::extractText)
			}
		}
		extractText(this)

		return sb.toString()
	}

nullability refactoring demo (23:50)


functional style coding demo (26:00)

	fun main(args: Array<String>) {
		val numbers = (1..1000).toList()
		val list = mutableListOf<String>()
		for (it in numbers) {
			if (it % 16 == 0) {
				list.add("0x" + it.toString(16))
			}
		}

		repeat(6) {
			print (list)
		}
	}

	fun repeat(times: Int, body: (Int) -> Unit) {
		for (index in 0 until times) {
			body(index)
		}
	}

imporvement1:

	fun main(args: Array<String>) {
		val numbers = (1..1000).toList()
		val list = numbers
				.filter { it % 16 == 0 }
				.also { print(it)}                     <--- useful for debugging
				.map { "0x + it.toString(16)" }

		repeat(6) {
			print (list)
		}
	}

improvement2: 

	inline fun repeat(times: Int, body: (Int) -> Unit) { <--- w/o inline, list is created for each loop
		for (index in 0 until times) {
			body(index)
		}
	}


Coroutine (29:40)

BAD code (OOME):
	fun main(args: Array<String>) = threads(100_000)

	fun threads(n: Int) {
		val threads = List(n) {
			thread {
				sleep(1000L)
				println(it)
			}
		}
		threads.forEach { it.join() }
	}

Using coroutine:
	fun main(args: Array<String>) = coroutines(100_000)

	fun coroutines(n: Int) = runBlocking {
		val jobs = List(100_000) {
			async {
				delay(1000L)
				println(it)
			}
		}
		jobs.forEach { it.join() }
	}


more coroutine stuff (32:10)


more coroutine stuff 2 (37:00)